/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pucpr.java.swing.janelas;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import pucpr.java.implementacoes.Greenness;
import pucpr.java.infraBasica.arquivos.ManipulaArquivo;
import pucpr.java.swing.JMainFrame;

/*
 ESTE PROGRAMA REALIZADO O PROCESSAMENTO EM LOTE DAS FORMULAS WHITENESS SELECIONADAS
 */
/**
 *
 * @author Flavia Mattos
 */
public class GreenningLote extends javax.swing.JFrame {

    /**
     * Creates new form Whiteness
     */
    String pastaSalvar = "";
    String Nome;
    private static JMainFrame mainFrame2;

    public GreenningLote(JMainFrame mainFrame) {
        mainFrame2 = mainFrame;
        initComponents();
    }

    private GreenningLote() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        variavelK = new javax.swing.JCheckBox();
        indices1 = new javax.swing.JCheckBox();
        indices2 = new javax.swing.JCheckBox();
        indices3 = new javax.swing.JCheckBox();
        indices4 = new javax.swing.JCheckBox();
        espacoX = new javax.swing.JCheckBox();
        espacoI = new javax.swing.JCheckBox();
        CaminhoProcessa = new javax.swing.JTextField();
        CaminhoDestino = new javax.swing.JTextField();
        PastaProcessa = new javax.swing.JButton();
        PastaDestino = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CheckTodos = new javax.swing.JCheckBox();
        CheckProcessar = new javax.swing.JButton();
        LabelProcessado = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Apagar");

        variavelK.setText("Variavel K");
        variavelK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variavelKActionPerformed(evt);
            }
        });

        indices1.setText("Greenness G-R");

        indices2.setText("Greenness G+R");

        indices3.setText("3 Indices-3");
        indices3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indices3ActionPerformed(evt);
            }
        });

        indices4.setText("4 Indices-4");
        indices4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indices4ActionPerformed(evt);
            }
        });

        espacoX.setText("Espaço X");

        espacoI.setText("Espaço I");

        CaminhoProcessa.setEditable(false);

        PastaProcessa.setText("Escolher Pasta");
        PastaProcessa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PastaProcessaActionPerformed(evt);
            }
        });

        PastaDestino.setText("Escolher Pasta");
        PastaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PastaDestinoActionPerformed(evt);
            }
        });

        jLabel2.setText("Escolher a pasta de Processamento");

        jLabel3.setText("Escolher a pasta de Destino");

        CheckTodos.setText("Todos");
        CheckTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckTodosActionPerformed(evt);
            }
        });

        CheckProcessar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CheckProcessar.setText("Processar");
        CheckProcessar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckProcessarActionPerformed(evt);
            }
        });

        LabelProcessado.setVisible(false);
        LabelProcessado.setText("Processado");

        jLabel5.setText("Qual (s):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(CaminhoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CaminhoProcessa, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PastaProcessa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PastaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(indices1)
                            .addComponent(indices2)
                            .addComponent(indices3)
                            .addComponent(espacoX)
                            .addComponent(espacoI)
                            .addComponent(variavelK)
                            .addComponent(indices4))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(CheckTodos)
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(CheckProcessar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelProcessado, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CaminhoProcessa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PastaProcessa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CaminhoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PastaDestino))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variavelK)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indices1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(CheckTodos))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indices2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indices3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(indices4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(espacoX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(espacoI)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckProcessar)
                    .addComponent(LabelProcessado))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void indices3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_indices3ActionPerformed

    private void CheckProcessarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckProcessarActionPerformed
        //COMEÇO DO PROGRAMA

        try {
            //VERIFICA SE OS CAMINHOS ESCOLHIDOS EXISTEM
            if (!CaminhoProcessa.getText().isEmpty() && !CaminhoDestino.getText().isEmpty()) {
                File fileOriginal = new File(CaminhoProcessa.getText());
                File[] pathsOriginal;
                //JFrame frame= new JFrame("JOptionPane showMessageDialog exemple");
                //NOME DAS IMAGENS
                pastaSalvar = CaminhoDestino.getText();
                pathsOriginal = fileOriginal.listFiles();
                //FILE SEPARATOR: CORRESPONDENTE A SEPARAÇÃO DE PASTA DO SISTEMA OPERACIONAL UTILIZADO
                //EXEMPLO: WINDOWS (\\) , LINUX E MAC (//)
                pastaSalvar += File.separator;
                //JOptionPane.showMessageDialog(frame, pastaSalvar);
                //VERIFICA SE A PASTA DE SAIDA EXISTE, SE NÃO, ELE CRIA
                if (!Paths.get(pastaSalvar).toFile().exists()) {
                    (new File(pastaSalvar)).mkdir();
                }

                if (variavelK.isSelected()) {
                    String k = JOptionPane.showInputDialog(null,"Entre com um valor para K: ");
                    float converteK = Float.parseFloat(k);
                    for (File pathASTME : pathsOriginal) {
                        String imageASTME = pathASTME.getName();
                        //DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
                        imageASTME = imageASTME.substring(0, (imageASTME.length() - 4));
                        BufferedImage imgASTME = ImageIO.read(pathASTME);
                        BufferedImage outASTME = new BufferedImage(imgASTME.getWidth(), imgASTME.getHeight(), imgASTME.getType());
                        //CRIA OBJETO DA CLASSE 
                        Greenness WA = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outASTME = WA.GreennKG(imgASTME, converteK);
                        Nome = "_KG";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        String aTotal = pastaSalvar + imageASTME + Nome + ".png";
                        File outputFile = new File(aTotal);
                        ImageIO.write(outASTME, "png", outputFile);
                    }
                }

                if (indices1.isSelected()) {
                    for (File pathBerger : pathsOriginal) {
                        String imageBerger = pathBerger.getName();
                        imageBerger = imageBerger.substring(0, (imageBerger.length() - 4));
                        BufferedImage imgBerger = ImageIO.read(pathBerger);
                        BufferedImage outBerger = new BufferedImage(imgBerger.getWidth(), imgBerger.getHeight(), imgBerger.getType());
                        Greenness WB = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outBerger = WB.GreennGmenR(imgBerger);
                        Nome = "_G-R";
                        String bTotal = pastaSalvar + imageBerger + Nome + ".png";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        File outputFile = new File(bTotal);
                        ImageIO.write(outBerger, "png", outputFile);
                    }
                }
                if (indices2.isSelected()) {
                    for (File pathBerger : pathsOriginal) {
                        String imageBerger = pathBerger.getName();
                        imageBerger = imageBerger.substring(0, (imageBerger.length() - 4));
                        BufferedImage imgBerger = ImageIO.read(pathBerger);
                        BufferedImage outBerger = new BufferedImage(imgBerger.getWidth(), imgBerger.getHeight(), imgBerger.getType());
                        Greenness WB = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outBerger = WB.GreennGmaisR(imgBerger);
                        Nome = "_G-R";
                        String bTotal = pastaSalvar + imageBerger + Nome + ".png";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        File outputFile = new File(bTotal);
                        ImageIO.write(outBerger, "png", outputFile);
                    }
                }
                if (indices3.isSelected()) {
                    for (File pathCIE : pathsOriginal) {
                        String imageCIE = pathCIE.getName();
                        imageCIE = imageCIE.substring(0, (imageCIE.length() - 4));
                        BufferedImage imgCIE = ImageIO.read(pathCIE);
                        BufferedImage outCIE = new BufferedImage(imgCIE.getWidth(), imgCIE.getHeight(), imgCIE.getType());
                        Greenness WC = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outCIE = WC.GreennMin(imgCIE);
                        Nome = "_Min(RB)";
                        String sair_total = pastaSalvar + imageCIE + Nome + ".png";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        File outputFile = new File(sair_total);
                        ImageIO.write(outCIE, "png", outputFile);
                    }
                }
                if (indices4.isSelected()) {
                    for (File pathGanz : pathsOriginal) {
                        String imageGanz = pathGanz.getName();
                        imageGanz = imageGanz.substring(0, (imageGanz.length() - 4));
                        BufferedImage imgGanz = ImageIO.read(pathGanz);
                        BufferedImage outGanz = new BufferedImage(imgGanz.getWidth(), imgGanz.getHeight(), imgGanz.getType());
                        Greenness WG = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outGanz = WG.Greenn(imgGanz);
                        Nome = "Greenness";
                        String gTotal = pastaSalvar + imageGanz + Nome + ".png";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        File outputFile = new File(gTotal);
                        ImageIO.write(outGanz, "png", outputFile);
                    }
                }
//                if (indices5.isSelected()) {
//                    for (File pathCIE : pathsOriginal) {
//                        String imageCIE = pathCIE.getName();
//                        imageCIE = imageCIE.substring(0, (imageCIE.length() - 4));
//                        BufferedImage imgCIE = ImageIO.read(pathCIE);
//                        BufferedImage outCIE = new BufferedImage(imgCIE.getWidth(), imgCIE.getHeight(), imgCIE.getType());
//                        Greenness WC = new Greenness();
//                        //IMAGEM RESULTANTE DA FORMULA
//                        outCIE = WC.GreennSmolka(imgCIE);
//                        Nome = "_Min(RB)";
//                        String sair_total = pastaSalvar + imageCIE + Nome + ".png";
//                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
//                        File outputFile = new File(sair_total);
//                        ImageIO.write(outCIE, "png", outputFile);
//                    }
//                }
                if (espacoI.isSelected()) {
                    for (File pathHunter : pathsOriginal) {
                        String imageHunter = pathHunter.getName();
                        imageHunter = imageHunter.substring(0, (imageHunter.length() - 4));
                        BufferedImage imgHunter = ImageIO.read(pathHunter);
                        BufferedImage outHunter = new BufferedImage(imgHunter.getWidth(), imgHunter.getHeight(), imgHunter.getType());
                        Greenness WHu = new Greenness();
                        //IMAGEM RESULTANTE DA FORMULA
                        outHunter = WHu.BIEspacoI(imgHunter);
                        Nome = "_EspI";
                        //STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
                        String hTotal = pastaSalvar + imageHunter + Nome + ".png";
                        File outputFile = new File(hTotal);
                        ImageIO.write(outHunter, "png", outputFile);
                    }
                }

            } else {
                JOptionPane.showMessageDialog(mainFrame2, "Falha");

            }
            LabelProcessado.setVisible(true);
    }//GEN-LAST:event_CheckProcessarActionPerformed
catch (IOException ex) {
            Logger.getLogger(GreenningLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void CheckTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckTodosActionPerformed
        // TODO add your handling code here:

        //Quando selecionado todas as formulas
        if (CheckTodos.isSelected() == true) {
            variavelK.setEnabled(false);
            indices1.setEnabled(false);
            indices2.setEnabled(false);
            indices3.setEnabled(false);
            espacoX.setEnabled(false);
            espacoI.setEnabled(false);

            variavelK.setSelected(true);
            indices1.setSelected(true);
            indices2.setSelected(true);
            indices3.setSelected(true);
            espacoX.setSelected(true);
            espacoI.setSelected(true);

            variavelK.setSelected(false);
            indices1.setSelected(false);
            indices2.setSelected(false);
            indices3.setSelected(false);
            espacoX.setSelected(false);
            espacoI.setSelected(false);

        }
    }//GEN-LAST:event_CheckTodosActionPerformed

    private void PastaProcessaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PastaProcessaActionPerformed
        // TODO add your handling code here:
        ManipulaArquivo ma = new ManipulaArquivo();
        String caminho = ma.selecionarDiretorio("Selecione a Pasta para Processamento");
        CaminhoProcessa.setText(caminho);
    }//GEN-LAST:event_PastaProcessaActionPerformed

    private void PastaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PastaDestinoActionPerformed
        // TODO add your handling code here:
        ManipulaArquivo ma = new ManipulaArquivo();
        String caminho = ma.selecionarDiretorio("Selecione a Pasta para Processamento");
        CaminhoDestino.setText(caminho);
    }//GEN-LAST:event_PastaDestinoActionPerformed

    private void variavelKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variavelKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_variavelKActionPerformed

    private void indices4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_indices4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GreenningLote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GreenningLote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GreenningLote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GreenningLote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GreenningLote(mainFrame2).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CaminhoDestino;
    private javax.swing.JTextField CaminhoProcessa;
    private javax.swing.JButton CheckProcessar;
    private javax.swing.JCheckBox CheckTodos;
    private javax.swing.JLabel LabelProcessado;
    private javax.swing.JButton PastaDestino;
    private javax.swing.JButton PastaProcessa;
    private javax.swing.JCheckBox espacoI;
    private javax.swing.JCheckBox espacoX;
    private javax.swing.JCheckBox indices1;
    private javax.swing.JCheckBox indices2;
    private javax.swing.JCheckBox indices3;
    private javax.swing.JCheckBox indices4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox variavelK;
    // End of variables declaration//GEN-END:variables
}
