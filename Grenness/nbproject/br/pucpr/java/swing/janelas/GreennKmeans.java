/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pucpr.java.swing.janelas;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import pucpr.java.implementacoes.Greenness;
import pucpr.java.infraBasica.arquivos.ManipulaArquivo;
import pucpr.java.interfaces.ImageInterface;
import pucpr.java.swing.JMainFrame;
import pucpr.java.pdi.PDIKmeansGray;
import pucpr.java.swing.Conf;

/**
 * NESTE PROGRAMA, A LINHA DO HORIZONTE É DECTEDADA COM AS FORMULAS WHITENESS
 * PORÉM, AS IMAGENS SÃO SALVAS NO CAMINHO ESCOLHIDO SEM SER SEPARADAS POR
 * FORMULAS
 *
 *
 */
/**
 * @author Flavia Mattos
 */
public class GreennKmeans extends javax.swing.JFrame {

	private static JMainFrame mainFrame2;
	ImageInterface canvas, canvas1, canvas2, canvas3, canvas4, canvas5, canvas6, canvas7, canvas8, canvas9, canvas0;
	String pastaSalvar = "";
	String Nome;

	/**
	 * Creates new form ProcessaWhiteness
	 *
	 * @param mainFrame
	 */
	public GreennKmeans(JMainFrame mainFrame) {
		mainFrame2 = mainFrame;
		initComponents();
	}

	private GreennKmeans() {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		CaminhoImagemOriginal = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		ImagemOriginal = new javax.swing.JButton();
		CaminhoSaidaImagem = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		SaidaImagem = new javax.swing.JButton();
		jLabel5 = new javax.swing.JLabel();
		variavelK = new javax.swing.JCheckBox();
		indices1 = new javax.swing.JCheckBox();
		indices2 = new javax.swing.JCheckBox();
		indices3 = new javax.swing.JCheckBox();
		indices4 = new javax.swing.JCheckBox();
		espacoX = new javax.swing.JCheckBox();
		espacoI = new javax.swing.JCheckBox();
		CheckTodos = new javax.swing.JCheckBox();
		Processar = new javax.swing.JButton();
		jLabel6 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		ClassesKmeans = new javax.swing.JComboBox();
		jLabel9 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		MediaKmeans = new javax.swing.JCheckBox();
		CorKmeans = new javax.swing.JCheckBox();
		VarianciaKmeans = new javax.swing.JCheckBox();
		SkewnessKmeans = new javax.swing.JCheckBox();
		TodosKmeans = new javax.swing.JCheckBox();
		CurtoseKmeans = new javax.swing.JCheckBox();
		indices5 = new javax.swing.JCheckBox();
		indices6 = new javax.swing.JCheckBox();
		indices7 = new javax.swing.JCheckBox();

		setResizable(false);

		CaminhoImagemOriginal.setEditable(false);
		CaminhoImagemOriginal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CaminhoImagemOriginalActionPerformed(evt);
			}
		});

		jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("Processamento Greenness - Kmeans");

		jLabel2.setText("Escolha a Pasta para Processamento");

		ImagemOriginal.setText("Escolher a Pasta");
		ImagemOriginal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ImagemOriginalActionPerformed(evt);
			}
		});

		CaminhoSaidaImagem.setEditable(false);
		CaminhoSaidaImagem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CaminhoSaidaImagemActionPerformed(evt);
			}
		});

		jLabel3.setText("Escolha a Pasta de Saida");

		SaidaImagem.setText("Escolher a Pasta");
		SaidaImagem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				SaidaImagemActionPerformed(evt);
			}
		});

		jLabel5.setText("Qual (s):");

		variavelK.setText("GreennessK");
		variavelK.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				variavelKActionPerformed(evt);
			}
		});

		indices1.setText("Greenness G-R");
		indices1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices1ActionPerformed(evt);
			}
		});

		indices2.setText("Greenness G+R");

		indices3.setText("GreennessMin");
		indices3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices3ActionPerformed(evt);
			}
		});

		indices4.setText("GreennessG/RGB");
		indices4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices4ActionPerformed(evt);
			}
		});

		espacoX.setText("Espaço X");

		espacoI.setText("Espaço I");
		espacoI.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				espacoIActionPerformed(evt);
			}
		});

		CheckTodos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		CheckTodos.setText("Todos");
		CheckTodos.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CheckTodosActionPerformed(evt);
			}
		});

		Processar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
		Processar.setText("Processar");
		Processar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ProcessarActionPerformed(evt);
			}
		});

		jLabel6.setVisible(false);
		jLabel6.setText("Processado");

		jLabel4.setText("Classes:");

		ClassesKmeans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

		jLabel9.setText("Qual (s):");

		jLabel10.setText("K-Means");

		MediaKmeans.setText("Média");

		CorKmeans.setText("Cor");

		VarianciaKmeans.setText("Variância");

		SkewnessKmeans.setText("Skewness");

		TodosKmeans.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		TodosKmeans.setText("Todos");
		TodosKmeans.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				TodosKmeansActionPerformed(evt);
			}
		});

		CurtoseKmeans.setText("Curtose");

		indices5.setText("GreennessSmolka");
		indices5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices5ActionPerformed(evt);
			}
		});

		indices6.setText("GreennessG2");
		indices6.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices6ActionPerformed(evt);
			}
		});

		indices7.setText("GreennessIPCA");
		indices7.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				indices7ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(18, 18, 18)
						.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				.addGroup(layout.createSequentialGroup()
						.addGap(53, 53, 53)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
												.addComponent(CaminhoImagemOriginal)
												.addComponent(CaminhoSaidaImagem))
										.addGap(18, 18, 18)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(ImagemOriginal)
												.addComponent(SaidaImagem))
										.addGap(27, 27, 27))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jLabel9)
																.addComponent(jLabel10))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(CorKmeans)
																.addComponent(MediaKmeans))
														.addGap(17, 17, 17)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(SkewnessKmeans)
																.addComponent(VarianciaKmeans))
														.addGap(18, 18, 18)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(CurtoseKmeans)
																.addComponent(TodosKmeans)))
												.addGroup(layout.createSequentialGroup()
														.addComponent(jLabel4)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(ClassesKmeans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGap(0, 0, Short.MAX_VALUE))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(layout.createSequentialGroup()
														.addComponent(jLabel5)
														.addGap(18, 18, 18)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(variavelK)
																.addComponent(indices1)
																.addComponent(indices2)
																.addComponent(indices3)
																.addComponent(espacoX)
																.addComponent(espacoI)
																.addComponent(indices4)
																.addComponent(indices5)
																.addComponent(indices6)
																.addComponent(indices7))))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(CheckTodos)
										.addGap(80, 80, 80))))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(Processar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(101, 101, 101))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(10, 10, 10)
						.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jLabel2)
						.addGap(1, 1, 1)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(CaminhoImagemOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(ImagemOriginal))
						.addGap(18, 18, 18)
						.addComponent(jLabel3)
						.addGap(4, 4, 4)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(CaminhoSaidaImagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(SaidaImagem))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(variavelK)
								.addComponent(jLabel5))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(indices4)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(indices3)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(indices1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(indices2)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(CheckTodos)
								.addComponent(indices5))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(indices6)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(indices7)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(espacoX)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(espacoI)
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ClassesKmeans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel4))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel9)
								.addComponent(CorKmeans)
								.addComponent(VarianciaKmeans)
								.addComponent(CurtoseKmeans))
						.addGap(3, 3, 3)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel10)
								.addComponent(MediaKmeans)
								.addComponent(SkewnessKmeans)
								.addComponent(TodosKmeans))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(Processar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel6))
						.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void CaminhoSaidaImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaminhoSaidaImagemActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_CaminhoSaidaImagemActionPerformed

	private void indices1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices1ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices1ActionPerformed

	private void CaminhoImagemOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaminhoImagemOriginalActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_CaminhoImagemOriginalActionPerformed

	private void variavelKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variavelKActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_variavelKActionPerformed

	private void CheckTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckTodosActionPerformed

		// OPÇÃO TODOS (FORMULAS) SELECIONADO
		if (CheckTodos.isSelected() == true) {
			variavelK.setEnabled(false);
			indices1.setEnabled(false);
			indices2.setEnabled(false);
			indices3.setEnabled(false);
			indices4.setEnabled(false);
			espacoX.setEnabled(false);
			espacoI.setEnabled(false);

			variavelK.setSelected(true);
			indices1.setSelected(true);
			indices2.setSelected(true);
			indices3.setSelected(true);
			indices4.setEnabled(true);
			espacoX.setSelected(true);
			espacoI.setSelected(true);
		} else {
			variavelK.setEnabled(true);
			indices1.setEnabled(true);
			indices2.setEnabled(true);
			indices3.setEnabled(true);
			indices4.setEnabled(true);
			espacoX.setEnabled(true);
			espacoI.setEnabled(true);
			CheckTodos.setEnabled(true);

			variavelK.setSelected(false);
			indices1.setSelected(false);
			indices2.setSelected(false);
			indices3.setSelected(false);
			indices4.setEnabled(false);
			espacoX.setSelected(false);
			espacoI.setSelected(false);
		}
	}//GEN-LAST:event_CheckTodosActionPerformed

	private void ProcessarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessarActionPerformed
		// PROCESSAMENTO Greenness

		jLabel6.setVisible(false);

		try {
			//PARAMETROS KMEANS
			Conf.kmeans_classes = Integer.parseInt(ClassesKmeans.getSelectedItem().toString());

			if (CorKmeans.isSelected()) {
				Conf.feature_color = true;
			} else {
				Conf.feature_color = false;
			}
			if (CurtoseKmeans.isSelected()) {
				Conf.feature_curtose = true;
			} else {
				Conf.feature_curtose = false;
			}
			if (MediaKmeans.isSelected()) {
				Conf.feature_media = true;
			} else {
				Conf.feature_media = false;
			}
			if (SkewnessKmeans.isSelected()) {
				Conf.feature_skewness = true;
			} else {
				Conf.feature_skewness = false;
			}
			if (VarianciaKmeans.isSelected()) {
				Conf.feature_variancia = true;
			} else {
				Conf.feature_variancia = false;
			}

			//VERIFICA SE O CAMINHO SELECIONADO DE IMAGEM E SAIDA EXISTEM
			jLabel6.setVisible(false);
			if (!CaminhoImagemOriginal.getText().isEmpty() && !CaminhoSaidaImagem.getText().isEmpty()) {
				File fileOriginal = new File(CaminhoImagemOriginal.getText());
				File[] pathsOriginal;
				//NOME DAS IMAGENS SELECIONADAS PARA PROCESSAMENTO
				pastaSalvar = CaminhoSaidaImagem.getText();
				pathsOriginal = fileOriginal.listFiles();
				//FILE SEPARATOR: CORRESPONDENTE A SEPARAÇÃO DE PASTA DO SISTEMA OPERACIONAL UTILIZADO
				//EXEMPLO: WINDOWS (\\) , LINUX E MAC (//)
				pastaSalvar += File.separator;

				if (!Paths.get(pastaSalvar).toFile().exists()) {
					(new File(pastaSalvar)).mkdir();
				}

				if (variavelK.isSelected()) {
					String k = JOptionPane.showInputDialog(null, "Entre com um valor para K: ");
					float converteK = Float.parseFloat(k);
					for (File pathvariavelK : pathsOriginal) {
						String imagevariavelK = pathvariavelK.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
						imagevariavelK = imagevariavelK.substring(0, (imagevariavelK.length() - 4));
						BufferedImage imgvariavelK = ImageIO.read(pathvariavelK);
						BufferedImage resvariavelK, outvariavelK = new BufferedImage(imgvariavelK.getWidth(), imgvariavelK.getHeight(), imgvariavelK.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WA = new Greenness();
						//IMAGEM RESULTANTE DA FORMULA
						resvariavelK = WA.GreennKG(imgvariavelK, converteK);
						Nome = "_KG";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String aSaida = pastaSalvar + imagevariavelK + Nome + ".png";
						File outputFile = new File(aSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas = new PDIKmeansGray(resvariavelK);
						outvariavelK = canvas.getImage();
						//SALVA A IMAGEM
						ImageIO.write(outvariavelK, "png", outputFile);
					}
				}

				if (indices1.isSelected()) {
					for (File pathindices1 : pathsOriginal) {
						String imageindices1 = pathindices1.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
						imageindices1 = imageindices1.substring(0, (imageindices1.length() - 4));
						BufferedImage imgindices1 = ImageIO.read(pathindices1);
						BufferedImage resindices1, outindices1 = new BufferedImage(imgindices1.getWidth(), imgindices1.getHeight(), imgindices1.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WB = new Greenness();
						resindices1 = WB.GreennGmenR(imgindices1);
						Nome = "_G-R";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String bSaida = pastaSalvar + imageindices1 + Nome + ".png";
						File outputFile = new File(bSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas1 = new PDIKmeansGray(resindices1);
						outindices1 = canvas1.getImage();
						//SALVA A IMAGEM
						ImageIO.write(outindices1, "png", outputFile);
					}
				}
				if (indices2.isSelected()) {
					for (File pathindices2 : pathsOriginal) {
						String imageindices2 = pathindices2.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
						imageindices2 = imageindices2.substring(0, (imageindices2.length() - 4));
						BufferedImage imgindices2 = ImageIO.read(pathindices2);
						BufferedImage resindices2, outindices2 = new BufferedImage(imgindices2.getWidth(), imgindices2.getHeight(), imgindices2.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WC = new Greenness();
						resindices2 = WC.GreennGmaisR(imgindices2);
						Nome = "_G+R";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String cSaida = pastaSalvar + imageindices2 + Nome + ".png";
						File outputFile = new File(cSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas2 = new PDIKmeansGray(resindices2);
						outindices2 = canvas2.getImage();
						//SALVA A IMAGEM
						ImageIO.write(outindices2, "png", outputFile);
					}
				}
				if (indices3.isSelected()) {
					for (File pathindices2 : pathsOriginal) {
						String imageindices2 = pathindices2.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
						imageindices2 = imageindices2.substring(0, (imageindices2.length() - 4));
						BufferedImage imgindices2 = ImageIO.read(pathindices2);
						BufferedImage resindices2, outindices2 = new BufferedImage(imgindices2.getWidth(), imgindices2.getHeight(), imgindices2.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WC = new Greenness();
						resindices2 = WC.GreennMin(imgindices2);
						Nome = "_Min(RB)";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String cSaida = pastaSalvar + imageindices2 + Nome + ".png";
						File outputFile = new File(cSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas2 = new PDIKmeansGray(resindices2);
						outindices2 = canvas2.getImage();
						//SALVA A IMAGEM
						ImageIO.write(outindices2, "png", outputFile);
					}
				}
				if (indices4.isSelected()) {
					for (File pathindices3 : pathsOriginal) {
						String imageindices3 = pathindices3.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSÃO PARA COMPARAÇÃO FUTURA
						imageindices3 = imageindices3.substring(0, (imageindices3.length() - 4));
						BufferedImage imgindices3 = ImageIO.read(pathindices3);
						BufferedImage resindices3, outindices3 = new BufferedImage(imgindices3.getWidth(), imgindices3.getHeight(), imgindices3.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WG = new Greenness();
						resindices3 = WG.Greenn(imgindices3);
						Nome = "Greenness";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String gSaida = pastaSalvar + imageindices3 + Nome + ".png";
						File outputFile = new File(gSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas3 = new PDIKmeansGray(resindices3);
						outindices3 = canvas3.getImage();
						//SALVA A IMAGEM
						ImageIO.write(outindices3, "png", outputFile);
					}
				}

				if (indices5.isSelected()) {
					for (File pathCIE : pathsOriginal) {
						String imageCIE = pathCIE.getName();
						imageCIE = imageCIE.substring(0, (imageCIE.length() - 4));
						BufferedImage imgCIE = ImageIO.read(pathCIE);
						BufferedImage outCIE = new BufferedImage(imgCIE.getWidth(), imgCIE.getHeight(), imgCIE.getType());
						Greenness WC = new Greenness();
						//IMAGEM RESULTANTE DA FORMULA
						outCIE = WC.GreennSmolka(imgCIE);
						Nome = "_Smolka";
						String sair_total = pastaSalvar + imageCIE + Nome + ".png";
						//STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
						File outputFile = new File(sair_total);
						ImageIO.write(outCIE, "png", outputFile);
					}
				}

				if (indices6.isSelected()) {
					for (File pathCIE : pathsOriginal) {
						String imageCIE = pathCIE.getName();
						imageCIE = imageCIE.substring(0, (imageCIE.length() - 4));
						BufferedImage imgCIE = ImageIO.read(pathCIE);
						BufferedImage outCIE = new BufferedImage(imgCIE.getWidth(), imgCIE.getHeight(), imgCIE.getType());
						Greenness WC = new Greenness();
						//IMAGEM RESULTANTE DA FORMULA
						outCIE = WC.GreennG2(imgCIE);
						Nome = "_G2";
						String sair_total = pastaSalvar + imageCIE + Nome + ".png";
						//STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
						File outputFile = new File(sair_total);
						ImageIO.write(outCIE, "png", outputFile);
					}
				}

				if (indices7.isSelected()) {
					for (File pathCIE : pathsOriginal) {
						String imageCIE = pathCIE.getName();
						imageCIE = imageCIE.substring(0, (imageCIE.length() - 4));
						BufferedImage imgCIE = ImageIO.read(pathCIE);
						BufferedImage outCIE = new BufferedImage(imgCIE.getWidth(), imgCIE.getHeight(), imgCIE.getType());
						Greenness WC = new Greenness();
						//IMAGEM RESULTANTE DA FORMULA
						outCIE = WC.GreennIPCA(imgCIE);
						Nome = "_IPCA";
						String sair_total = pastaSalvar + imageCIE + Nome + ".png";
						//STRING CONTENDO O CAMINHO + NOME DA IMAGEM + FORMULA + FORMATO
						File outputFile = new File(sair_total);
						ImageIO.write(outCIE, "png", outputFile);
					}
				}
				if (espacoI.isSelected()) {
					for (File pathespacoI : pathsOriginal) {
						String imageespacoI = pathespacoI.getName();
						//DIVISAO DO NOME DA IMAGEM SEM SUA EXTENSAO PARA COMPARACAO FUTURA
						imageespacoI = imageespacoI.substring(0, (imageespacoI.length() - 4));
						BufferedImage imgespacoI = ImageIO.read(pathespacoI);
						BufferedImage resespacoI, outespacoI = new BufferedImage(imgespacoI.getWidth(), imgespacoI.getHeight(), imgespacoI.getType());
						//CRIA OBJETO DA CLASSE 
						Greenness WHu = new Greenness();
						resespacoI = WHu.BIEspacoI(imgespacoI);
						Nome = "_EspI";
						//SAIDA CONTENDO CAMINHO DA IMAGEM + NOME DA IMAGEM
						String huSaida = pastaSalvar + imageespacoI + Nome + ".png";
						File outputFile = new File(huSaida);
						//CHAMADA METODO KMEANS COMO PARAMETRO A IMAGEM RESULTADO 
						canvas5 = new PDIKmeansGray(resespacoI);
						outespacoI = canvas5.getImage();
						//SALVA IMAGEM
						ImageIO.write(outespacoI, "png", outputFile);
					}
				}

			} else {
				JOptionPane.showMessageDialog(mainFrame2, "Falha");
			}

			jLabel6.setVisible(true);

		} catch (IOException ex) {
			System.out.println(ex.getMessage());
		}

	}//GEN-LAST:event_ProcessarActionPerformed

	private void espacoIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacoIActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_espacoIActionPerformed

	private void SaidaImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaidaImagemActionPerformed
		// TODO add your handling code here:
		ManipulaArquivo ma = new ManipulaArquivo();
		String caminho = ma.selecionarDiretorio("Selecione a Pasta para Processamento");
		CaminhoSaidaImagem.setText(caminho);
	}//GEN-LAST:event_SaidaImagemActionPerformed

	private void ImagemOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImagemOriginalActionPerformed
		// TODO add your handling code here:
		ManipulaArquivo ma = new ManipulaArquivo();
		String caminho = ma.selecionarDiretorio("Selecione a Pasta para Processamento");
		CaminhoImagemOriginal.setText(caminho);
	}//GEN-LAST:event_ImagemOriginalActionPerformed

	private void TodosKmeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TodosKmeansActionPerformed
		// TODO add your handling code here:

		// OPÇÃO TODOS (PARAMETROS) SELECIONADO
		if (TodosKmeans.isSelected() == true) {
			CorKmeans.setEnabled(false);
			MediaKmeans.setEnabled(false);
			VarianciaKmeans.setEnabled(false);
			SkewnessKmeans.setEnabled(false);
			CurtoseKmeans.setEnabled(false);

			CorKmeans.setSelected(true);
			MediaKmeans.setSelected(true);
			VarianciaKmeans.setSelected(true);
			SkewnessKmeans.setSelected(true);
			CurtoseKmeans.setSelected(true);

		} else {
			CorKmeans.setEnabled(true);
			MediaKmeans.setEnabled(true);
			VarianciaKmeans.setEnabled(true);
			SkewnessKmeans.setEnabled(true);
			CurtoseKmeans.setEnabled(true);

			CorKmeans.setSelected(false);
			MediaKmeans.setSelected(false);
			VarianciaKmeans.setSelected(false);
			SkewnessKmeans.setSelected(false);
			CurtoseKmeans.setSelected(false);

		}
	}//GEN-LAST:event_TodosKmeansActionPerformed

	private void indices4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices4ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices4ActionPerformed

	private void indices3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices3ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices3ActionPerformed

	private void indices5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices5ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices5ActionPerformed

	private void indices6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices6ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices6ActionPerformed

	private void indices7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indices7ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_indices7ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("GTK+".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;

				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GreennKmeans.class
					.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>

		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new GreennKmeans().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField CaminhoImagemOriginal;
	private javax.swing.JTextField CaminhoSaidaImagem;
	private javax.swing.JCheckBox CheckTodos;
	private javax.swing.JComboBox ClassesKmeans;
	private javax.swing.JCheckBox CorKmeans;
	private javax.swing.JCheckBox CurtoseKmeans;
	private javax.swing.JButton ImagemOriginal;
	private javax.swing.JCheckBox MediaKmeans;
	private javax.swing.JButton Processar;
	private javax.swing.JButton SaidaImagem;
	private javax.swing.JCheckBox SkewnessKmeans;
	private javax.swing.JCheckBox TodosKmeans;
	private javax.swing.JCheckBox VarianciaKmeans;
	private javax.swing.JCheckBox espacoI;
	private javax.swing.JCheckBox espacoX;
	private javax.swing.JCheckBox indices1;
	private javax.swing.JCheckBox indices2;
	private javax.swing.JCheckBox indices3;
	private javax.swing.JCheckBox indices4;
	private javax.swing.JCheckBox indices5;
	private javax.swing.JCheckBox indices6;
	private javax.swing.JCheckBox indices7;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JCheckBox variavelK;
	// End of variables declaration//GEN-END:variables
}
